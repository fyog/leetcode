#include <vector>

class Solution {
public:
    int reverse(int x) {

        long n = x;
        vector<int> stack;
        bool negative_n = false;

        // remove trailing zeroes
        if (n == 0) return n;
        while (n % 10 == 0) {
            n = n / 10;
        }

        // check if x is negative
        if (n < 0) {
            negative_n = true;
            n *= -1; // remove negative sign for now
        }

        // create a stack of the digits
        while (n > 0) {
            stack.push_back(n % 10);
            n = n / 10; 
        }
        
        // reconstruct the number
        for (int i = 0; i < stack.size(); i++) {
           
            n += stack[i] * pow(10, stack.size() - i - 1);
            if (n > pow(2, 31) - 1) {
                return 0;
            }
        }
        
        // add the negative sign back (if applicable)
        if (negative_n) {
            return n * -1;
        }
        else return n;
    }
};