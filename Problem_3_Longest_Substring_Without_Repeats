class Solution {
public:
    int lengthOfLongestSubstring(string s) {
    
    // hash table
    unordered_map<char, int> seen;
    
    // initialize sliding window and result string
    int begin = 0, end = 0;
    int len = 0;
    string substring = "";

    // while we have not reached the end of the string
    while (end < s.length()) {
        char current = s[end];

        // if current char found twice in the window, move the beginning of the window forward
        // the current char must be ahead of begin (ie. in the current window)
        if (seen.count(current) == 1 && seen[current] >= begin) {
            begin = seen[current] + 1;
        } 
        
        // otherwise, move the end of the window forward
        else {
            seen[current] = end;
            end++;
        }

        // if the window len is longer than the previous greatest window length, update the longest substring
        if (end - begin > len) len = end - begin;
            substring = s.substr(begin, end - begin);
        }
        return len;
    }
};
       
